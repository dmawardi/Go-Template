basePath: /api/
definitions:
  db.Post:
    properties:
      body:
        type: string
      created_at:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/db.User'
      user_id:
        type: integer
    type: object
  db.User:
    properties:
      created_at:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        description: gorm.Model `json:"-"`
        type: integer
      name:
        type: string
      posts:
        description: Relationships
        items:
          $ref: '#/definitions/db.Post'
        type: array
      updated_at:
        type: string
      username:
        type: string
      verification_code:
        type: string
      verification_code_expiry:
        type: string
      verified:
        description: Verification
        type: boolean
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.CreatePost:
    properties:
      body:
        type: string
      title:
        type: string
      user:
        $ref: '#/definitions/db.User'
    type: object
  models.CreateUser:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
      verified:
        type: boolean
    type: object
  models.Login:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
    type: object
  models.PaginatedPosts:
    properties:
      data:
        items:
          $ref: '#/definitions/db.Post'
        type: array
      meta: {}
    type: object
  models.PaginatedUsersWithRole:
    properties:
      data:
        items:
          $ref: '#/definitions/models.UserWithRole'
        type: array
      meta: {}
    type: object
  models.ResetPasswordAndEmailVerification:
    properties:
      email:
        type: string
    type: object
  models.UpdatePost:
    properties:
      body:
        type: string
      title:
        type: string
      user:
        $ref: '#/definitions/db.User'
    type: object
  models.UpdateUser:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
      verified:
        type: boolean
    type: object
  models.UpdatedUser:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.UserWithRole:
    properties:
      created_at:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
      verification_code:
        type: string
      verification_code_expiry:
        type: string
      verified:
        description: Verification
        type: boolean
    type: object
  models.ValidationError:
    properties:
      validation_errors:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a template API server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go Template
  version: "1.0"
paths:
  /me:
    get:
      consumes:
      - application/json
      description: Return my user details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserWithRole'
        "400":
          description: Can't find user details
          schema:
            type: string
        "403":
          description: Error parsing authentication token
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Get my user profile details
      tags:
      - My Profile
    put:
      consumes:
      - application/json
      description: Updates the currently logged in user
      parameters:
      - description: Update User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserWithRole'
        "400":
          description: Bad request
          schema:
            type: string
        "403":
          description: Authentication Token not detected
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Update my profile
      tags:
      - My Profile
  /posts:
    get:
      consumes:
      - application/json
      description: Accepts limit, offset, and order params and returns list of posts
      parameters:
      - description: limit
        in: query
        name: limit
        required: true
        type: integer
      - description: offset
        in: query
        name: offset
        type: integer
      - description: 'order by eg. (asc) '
        in: query
        name: order
        type: integer
      - description: search (added to all string conditions as LIKE SQL search)
        in: query
        name: search
        type: string
      - description: title
        in: query
        name: title
        type: string
      - description: body
        in: query
        name: body
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedPosts'
        "400":
          description: Error extracting query params
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Finds a list of posts
      tags:
      - Post
    post:
      consumes:
      - application/json
      description: Creates a new post
      parameters:
      - description: New Post Json
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.CreatePost'
      produces:
      - text/plain
      responses:
        "201":
          description: Post creation successful!
          schema:
            type: string
        "400":
          description: Post creation failed.
          schema:
            type: string
      summary: Create Post
      tags:
      - Post
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Deletion successful!
          schema:
            type: string
        "400":
          description: Failed post deletion
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Delete Post
      tags:
      - Post
    get:
      consumes:
      - application/json
      description: Find a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Post'
        "400":
          description: 'Can''t find post with ID: {id}'
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Find post
      tags:
      - Post
    put:
      consumes:
      - application/json
      description: Updates an existing post
      parameters:
      - description: Update Post Json
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePost'
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Post'
        "400":
          description: Failed post update
          schema:
            type: string
        "403":
          description: Authentication Token not detected
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Update Post
      tags:
      - Post
  /users:
    get:
      consumes:
      - application/json
      description: Accepts limit, offset, order, search and field names (eg. email=)
        query parameters to find a list of users. Search is applied to all string
        fields.
      parameters:
      - description: limit
        in: query
        name: limit
        required: true
        type: integer
      - description: offset
        in: query
        name: offset
        type: integer
      - description: 'order by eg. (asc) '
        in: query
        name: order
        type: integer
      - description: search (added to all string conditions as LIKE SQL search)
        in: query
        name: search
        type: string
      - description: email
        in: query
        name: email
        type: string
      - description: name
        in: query
        name: name
        type: string
      - description: username
        in: query
        name: username
        type: string
      - description: verified
        in: query
        name: verified
        type: boolean
      - description: role
        in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedUsersWithRole'
        "400":
          description: Error extracting query params
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Find a list of users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Creates a new user
      parameters:
      - description: New User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUser'
      produces:
      - text/plain
      responses:
        "201":
          description: User creation successful!
          schema:
            type: string
        "400":
          description: User creation failed.
          schema:
            type: string
      summary: Create User
      tags:
      - User
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Deletion successful!
          schema:
            type: string
        "400":
          description: Failed user deletion
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Delete User
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Find a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserWithRole'
        "400":
          description: Can't find user
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Find User
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Updates an existing user
      parameters:
      - description: Update User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUser'
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdatedUser'
        "400":
          description: Failed user update
          schema:
            type: string
        "403":
          description: Authentication Token not detected
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Update User
      tags:
      - User
  /users/forgot-password:
    post:
      consumes:
      - application/json
      description: Reset password
      parameters:
      - description: Reset Password Form
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordAndEmailVerification'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset request successful!
          schema:
            type: string
        "400":
          description: Validation Errors
          schema:
            $ref: '#/definitions/models.ValidationError'
      summary: Reset password
      tags:
      - Login
  /users/login:
    post:
      consumes:
      - application/json
      description: Log in to user account
      parameters:
      - description: Login Form
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Validation Errors
          schema:
            $ref: '#/definitions/models.ValidationError'
        "401":
          description: Invalid Credentials
          schema:
            type: string
        "405":
          description: Method not supported
          schema:
            type: string
      summary: Login
      tags:
      - Login
  /users/send-verification-email:
    post:
      consumes:
      - application/json
      description: Send Verification Email
      produces:
      - application/json
      responses:
        "200":
          description: Email sent successfully
          schema:
            type: string
        "400":
          description: Validation Errors
          schema:
            $ref: '#/definitions/models.ValidationError'
        "401":
          description: Email already verified
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Send Verification Email
      tags:
      - Login
  /users/verify-email/{token}:
    get:
      consumes:
      - application/json
      description: Email Verification
      parameters:
      - description: Token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Email verified successfully
          schema:
            type: string
        "400":
          description: Token is required
          schema:
            type: string
        "401":
          description: Invalid or expired token
          schema:
            type: string
      summary: Email Verification
      tags:
      - Login
securityDefinitions:
  BearerToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
